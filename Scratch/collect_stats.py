# collect the statistics and files generated by 3 different experiments
#   - speech segments generated by style-tts2 model based on libritts
#   - speech segments generated by style-tts2 model based on gigaspeech-10p-singlespk (toy model)
#   - speech segments generated by mqtts model 
#
# Zhenhao Ge, 2024-10-30

import os
from pathlib import Path
import argparse
import glob
import shutil
import librosa

home_path = str(Path.home())
work_path = os.path.join(home_path, 'code', 'repo', 'style-tts2')
if os.getcwd() != work_path:
    os.chdir(work_path)
print('current path: {}'.format(os.getcwd()))

from utils import get_value_from_json, tuple2csv

def parse_args():

    usage = 'usage: collect the statistics and files generated by 3 different experiments'
    parser = argparse.ArgumentParser(description=useage)
    parser.add_argument('exp-path1', type=str, help='exp path 1 for the style-tts2 libritts model')
    parser.add_argument('exp-path2', type=str, help='exp path 2 for the style-tts2 gigaspeech toy model')
    parser.add_argument('exp-path3', type=str, help='exp path 3 for the mqtts model')
    parser.add_argument('prefix', type=str, help='prefix in the exp-id, used to filter exps')
    parser.add_argument('out-path', type=str, help='output path')
    return parser.parse_args()

if __name__ == '__main__':

    # runtime mode
    args = parse_args()

    # # interactive mode
    # args = argparse.ArgumentParser()

    # work_path = os.getcwd() # e.g. e.g., '/home/users/zge/code/repo/style-tts2'
    # args.exp_path1 = os.path.join(work_path, 'Outputs', 'Scratch', 'LibriTTS')
    # args.exp_path2 = os.path.join(work_path, 'Outputs', 'Scratch', 'GigaSpeech_10p_singlespk')
    # mqtts_path = os.path.join(os.path.dirname(work_path), 'mqtts')
    # args.exp_path3 = os.path.join(mqtts_path, 'outputs')
    # args.prefix = 'gs'
    # args.out_path = os.path.join(work_path, 'Outputs', 'Demo', 'ARTS')

    # set output dir
    if os.path.isdir(args.out_path):
        print(f'using existing output dir: {args.out_path}')
    else:
        print(f'creating new output dir: {args.out_path}')
        os.makedirs(args.out_path)  

    # get wav files
    wavfiles1 = sorted(glob.glob(os.path.join(args.exp_path1, f'{args.prefix}*', '*.wav'), recursive=True))
    wavfiles2 = sorted(glob.glob(os.path.join(args.exp_path2, f'{args.prefix}*', '*.wav'), recursive=True))
    wavfiles3 = sorted(glob.glob(os.path.join(args.exp_path3, f'{args.prefix}*', '*.wav'), recursive=True))

    # get exp ids
    exp_ids = []
    for i, wavfile in enumerate(wavfiles1):
        folder = os.path.basename(os.path.dirname(wavfile))
        sid = folder.replace('gs-','')
        exp_ids.append(sid)
    exp_ids = sorted(set(exp_ids))
    num_exp_ids = len(exp_ids)

    file_dict = {}
    stat_dict = {}
    for i, exp_id in enumerate(exp_ids):

        sid = '_'.join(exp_id.split('_')[:-1])
        print(f'sid: {sid}')
        file_dict[sid] = {}
        stat_dict[sid] = {}
        # break

        # exp1: get file lists (include the reference)
        subwavfiles = [f for f in wavfiles1 if exp_id in f]
        subwavfiles2 = [f for f in subwavfiles if ('_t' not in f) and ('concat' not in f) and ('reference' not in f)]
        idxs = [int(os.path.basename(f).split('-')[1]) for f in subwavfiles2]
        subwavfiles2 = [f for _, f in sorted(zip(idxs, subwavfiles2))]

        # exp1: get file dict
        file_dict[sid]['ref-wav'] = [f for f in subwavfiles if 'reference' in f][0]
        file_dict[sid]['ref-txt'] = file_dict[sid]['ref-wav'].replace('.wav', '.txt')
        file_dict[sid]['exp1-ori'] = subwavfiles2[-1]
        file_dict[sid]['exp1-concat'] = os.path.join(args.exp_path1, f'gs-{exp_id}', f'{sid}_concat_cf10.0_t5.0_norm.wav')

        # exp1: get stat dict
        jsonfile = file_dict[sid]['exp1-ori'].replace('.wav', '.json')
        stat_dict[sid]['exp1-rtf-ori'] = float(get_value_from_json(jsonfile, key='rtf'))
        jsonfile = os.path.join(args.exp_path1, f'gs-{exp_id}.json')
        stat_dict[sid]['exp1-rtf-concat'] = float(get_value_from_json(jsonfile, key='rtf-overall'))

        # exp2: get file lists
        subwavfiles = [f for f in wavfiles2 if exp_id in f]
        subwavfiles2 = [f for f in subwavfiles if ('_t' not in f) and ('concat' not in f) and ('reference' not in f)]
        idxs = [int(os.path.basename(f).split('-')[1]) for f in subwavfiles2]
        subwavfiles2 = [f for _, f in sorted(zip(idxs, subwavfiles2))]

        # exp2: get file dict
        file_dict[sid]['exp2-ori'] = subwavfiles2[-1]
        file_dict[sid]['exp2-concat'] = os.path.join(args.exp_path2, f'gs-{exp_id}', f'{sid}_concat_cf10.0_t5.0_norm.wav')

        # exp3: get stat dict
        jsonfile = file_dict[sid]['exp2-ori'].replace('.wav', '.json')
        stat_dict[sid]['exp2-rtf-ori'] = float(get_value_from_json(jsonfile, key='rtf'))
        jsonfile = os.path.join(args.exp_path2, f'gs-{exp_id}.json')
        stat_dict[sid]['exp2-rtf-concat'] = float(get_value_from_json(jsonfile, key='rtf-overall'))

        # exp3: get file lists
        subwavfiles = [f for f in wavfiles3 if sid in f]
        subwavfiles2 = [f for f in subwavfiles if ('sentence' in f) and ('norm' in f)]
        subwavfiles3 = [f for f in subwavfiles if ('sentence' in f) and ('norm' not in f)]

        # exp3: get file dict
        file_dict[sid]['exp3-var0'] = subwavfiles2[0]
        file_dict[sid]['exp3-var1'] = subwavfiles2[1]
        file_dict[sid]['exp3-var2'] = subwavfiles2[2]

        # exp3: get stat dict
        for j in range(len(subwavfiles3)):
            jsonfile = subwavfiles3[j].replace('.wav', '.json')
            stat_dict[sid][f'exp3-rtf{j}'] = float(get_value_from_json(jsonfile, key='rtf'))

    # copy files
    for i, exp_id in enumerate(exp_ids):

        sid = '_'.join(exp_id.split('_')[:-1])
        print(f'sid: {sid}')

        # copy reference wav file
        for k in file_dict[sid]:
            src_file = file_dict[sid][k]
            if k[:3] == 'exp':
                dst_file = os.path.join(args.out_path, f'{k[:4]}_{os.path.basename(src_file)}')
            else:
                dst_file = os.path.join(args.out_path, os.path.basename(src_file))
            shutil.copyfile(src_file, dst_file)

    # construct header for the output csv file
    header = ['sid', 'text', 'dur', 'rtf-st2-libritts-ori', 'rtf-st2-libritts-wc', 'rtf-st2-gs(toy)-ori', 'rtf-st2-gs(toy)-wc', 'rtf-mqtts']
    nfields = len(header)

    # construct rows for the output csv file
    rows = [[] for _ in range(num_exp_ids)]
    for i, exp_id in enumerate(exp_ids):

        sid = '_'.join(exp_id.split('_')[:-1])
        print(f'sid: {sid}')

        wavfile = file_dict[sid]['ref-wav']
        dur = librosa.get_duration(filename=wavfile)

        txtfile = file_dict[sid]['ref-txt']
        text = open(txtfile, 'r').readlines()[0].strip()

        rows[i] = [sid, text, dur,
                   f'{stat_dict[sid]["exp1-rtf-ori"]:.3f}', 
                   f'{stat_dict[sid]["exp1-rtf-concat"]:.3f}',
                   f'{stat_dict[sid]["exp2-rtf-ori"]:.3f}',
                   f'{stat_dict[sid]["exp2-rtf-concat"]:.3f}',
                   f'{stat_dict[sid]["exp3-rtf2"]:.2f}']

    # write the output csv file
    csvfile = os.path.join(args.out_path, 'arts_stats.csv')
    tuple2csv(rows, csvfile, delimiter='|', header=header, verbose=True)